import { app, BrowserWindow, globalShortcut, Tray, Menu } from 'electron';
import { exec } from 'child_process';
// import { homedir } from 'os';
// import { join } from 'path';
import { readFileSync } from 'fs';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
// declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let tray: Tray | null = null

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 100,
    width: 700,
    frame: false,
    fullscreenable: false,
    resizable: false,
    movable: false,
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

app.on('ready', () => {
  app.dock.hide();

  // const home = homedir();
  // const filePath = join(home, 'projects/commands/src', 'commands.json');
  const fileContent = readFileSync('src/commands.json', 'utf-8');
  const commands = JSON.parse(fileContent);
  console.log(commands);

  Object.keys(commands).forEach((key) => {
    globalShortcut.register(key, () => {
      console.log(`running ${ commands[key] } from input ${ key }`);
      exec(commands[key]);
    });
  });

  globalShortcut.register('Option+Shift+Space', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    } else {
      BrowserWindow.getFocusedWindow().close();
    }
  });

  const menu = Menu.buildFromTemplate([
    { role: 'quit', label: 'Quit Commands', accelerator: 'Command+Q' },
  ]);

  if (!tray) {
    tray = new Tray('src/icon.png');
  }

  tray.setContextMenu(menu);
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
